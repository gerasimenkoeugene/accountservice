Для решения использовал Spring Boot и в качестве базы MySQL
В задаче необходимо было учесть что AccountService должен быть способен работать на множестве нод, в несколько потоков
Соответсвенно, перевод денег с одного счета на другой должен проходить в рамках транзакции,
а также должен быть потокобезопасным.

Вопрос транзакционности решен с помощью аннотации @Transactional.
Уровень изоляции настраивается в БД SET TRANSACTION <режим_доступа>, <уровень_изоляции>.
В рамках выполнение метода transferAmount блокируються обьекты Account from, Account to, по этому доступ к этим обьектам
в один момент времени будет только у одного потока.

Проблема deadlock не будет возникать так как блокирование обьектов происходит в одной последовательности,
для это мы перед блокировкой проводим сортировку.

Перевод денег в рамках транзакции был выделен в отдельный метод(transferInTransaction),
который используется уже после блокировки счетов и помечен аннотацией @Transactional.
Это было необходимо так как метод transferAmount не может быть одновременно помечен как @Transactional и быть синхронизирован.
